# Squid abstract TypeORM so it's impossible to get the foreign key field, so we have to have some duplicates
# But actually it will generate _id field, but don't expose them

enum ApplicableScope {
  Owner
  Public
}

enum AttestationMethod {
  OptOut
}

enum ImplBuildStatus {
  Released
  Deprecated
  Blocked
  Deregistered
}

enum WorkerStatus {
  Registered
  Deregistered
  Online
  Unresponsive
  RequestingOffline
  Offline
}

enum OfflineReason {
  Graceful
  Forced
  Unresponsive
  AttestationExpired
  ImplBuildBlocked
  InsufficientDepositFunds
  Other
}

enum TaskStatus {
  Pending
  Processing
  Processed
  Discarded
}

enum TaskResult {
  Success
  Failed
  Errored
}

type Account @entity {
  "Account address"
  id: ID!

  workersCount: Int!
  poolsCount: Int!
  createdTasksCount: Int!

  owningWorkers: [Worker!] @derivedFrom(field: "_owner")
  owningPools: [Pool!] @derivedFrom(field: "_owner")
  owningTasks: [Task!] @derivedFrom(field: "_owner")
}

type Impl @entity {
  id: ID!
  implId: Int!

  _owner: Account! @index
  ownerAddress: String!

  attestationMethod: AttestationMethod!
  deploymentScope: ApplicableScope!
  metadata: Bytes

  # stats
  poolsCount: Int!
  tasksCount: Int!
  onlineWorkersCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  builds: [ImplBuild!] @derivedFrom(field: "_impl")
  workers: [Worker!] @derivedFrom(field: "_impl")
  pools: [Pool!] @derivedFrom(field: "_impl")
}

type ImplBuild @entity {
  id: ID!

  _impl: Impl! @index
  implId: Int!

  version: Int!
  status: ImplBuildStatus!
  magicBytes: String

  # stats
  onlineWorkersCount: Int!
  tasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Worker @entity {
  id: ID!

  _owner: Account! @index
  ownerAddress: String!

  _impl: Impl! @index
  implId: Int!

  _implBuild: ImplBuild @index
  implBuildVersion: Int

  status: WorkerStatus! @index
  implSpecVersion: Int
  attestationMethod: AttestationMethod
  attestationExpiresAt: DateTime
  lastAttestedAt: DateTime
  lastHeartbeatReceivedAt: DateTime
  offlineAt: DateTime
  offlineReason: OfflineReason
  uptimeStartedAt: DateTime
  uptime: Int

  # stats
  poolsCount: Int!
  processingTasksCount: Int!
  assignedTasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  events: [WorkerEvent!] @derivedFrom(field: "_worker")

  servingPools: [PoolWorkers!] @derivedFrom(field: "_worker")
  assignedTasks: [Task!] @derivedFrom(field: "_assignee")
}

enum WorkerEventKind {
  Registered
  Deregistered
  Online
  RequestingOffline
  Offline
  AttestationRefreshed
  SubscribedPool
  UnsubscribedPool
}

type WorkerEvent @entity {
  id: ID!

  _worker: Worker! @index

  kind: WorkerEventKind!
  payload: JSON

  blockNumber: Int!
  blockTime: DateTime!
}

type Pool @entity {
  id: ID!
  poolId: Int!

  _owner: Account! @index
  ownerAddress: String!

  _impl: Impl! @index
  implId: Int!

  creatingTaskAvailability: Boolean!
  metadata: Bytes

  # stats
  workersCount: Int!
  onlineWorkersCount: Int!
  pendingTasksCount: Int!
  processingTasksCount: Int!
  createdTasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  workers: [PoolWorkers!] @derivedFrom(field: "_pool")
  taskPolicies: [TaskPolicy!] @derivedFrom(field: "_pool")
  tasks: [Task!] @derivedFrom(field: "_pool")
}

type PoolWorkers @entity {
  id: ID! # Useless, but required

  _pool: Pool!
  poolId: Int!

  _worker: Worker!
  workerAddress: String!

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type TaskPolicy @entity {
  id: ID!
  policyId: Int!

  _pool: Pool! @index

  availability: Boolean!
  creatingTaskScope: ApplicableScope!
  startBlock: Int
  endBlock: Int

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Task @entity {
  id: ID!
  taskId: Int!

  _pool: Pool! @index
  poolId: Int!

  _policy: TaskPolicy!
  policyId: Int!

  _owner: Account! @index
  ownerAddress: String!

  _assignee: Worker @index
  assigneeAddress: String

  _destroyer: Account
  destroyerAddress: String

  status: TaskStatus! @index
  result: TaskResult

  implSpecVersion: Int!
  input: Bytes
  output: Bytes
  proof: Bytes

  # timestamps
  expiresAt: DateTime!
  assignedAt: DateTime
  processingAt: DateTime
  endedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  events: [TaskEvent!] @derivedFrom(field: "_task")
}

enum TaskEventKind {
  Created
  Assigned
  Processing
  Discarded
  Success
  Fail
  Error
  Destroyed
}

type TaskEvent @entity {
  id: ID!

  _task: Task! @index

  kind: TaskEventKind!
  payload: JSON

  blockNumber: Int!
  blockTime: DateTime!
}
