enum AttestationMethod {
  NoneTEE
  Root
}

enum WorkerStatus {
  Deregistered
  Registered
  Online
  RequestingOffline
  Offline
}

enum OfflineReason {
  Graceful
  Forced
  Unresponsive
  AttestationExpired
  WorkerImplBlocked
  InsufficientReservedFunds
  Other
}

enum CreatingTaskPermission {
  Owner
  Public
}

enum TaskStatus {
  Pending
  Processing
  Processed
}

enum TaskResult {
  Success
  Failed
  Errored
}

type Account @entity {
  "Account address"
  id: ID!

  owningWorkers: [Worker!] @derivedFrom(field: "owner")
  owningPools: [Pool!] @derivedFrom(field: "owner")
  owningTasks: [Task!] @derivedFrom(field: "owner")
}

type Worker @entity {
  id: ID!

  owner: Account! @index
  status: WorkerStatus! @index
  implName: String
  implVersion: Int
  attestationMethod: AttestationMethod
  lastAttestedAt: DateTime
  lastHeartbeatReceivedAt: DateTime
  offlineAt: DateTime
  offlineReason: OfflineReason

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  servingPools: [WorkersPools!] @derivedFrom(field: "worker")
  assignedTasks: [Task!] @derivedFrom(field: "assignee")
}

type CreatingTaskPolicy @entity {
  id: ID!

  pool: Pool! @index
  permission: CreatingTaskPermission!
  startBlock: Int
  endBlock: Int

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Pool @entity {
  id: ID!

  owner: Account! @index
  creatingTaskAbility: Boolean!
  workersCount: Int!
  creatingTaskPoliciesCount: Int!
  tasksCount: Int!

  metadata: Bytes

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  workers: [WorkersPools!] @derivedFrom(field: "pool")
  creatingTaskPolicies: [CreatingTaskPolicy!] @derivedFrom(field: "pool")
  tasks: [Task!] @derivedFrom(field: "pool")
}

type WorkersPools @entity {
  id: ID! # Useless, but required

  worker: Worker!
  pool: Pool!
}

type Task @entity {
  id: ID!

  pool: Pool! @index
  owner: Account! @index
  assignee: Worker @index
  status: TaskStatus! @index
  result: TaskResult
  expiresAt: DateTime!

  input: Bytes
  output: Bytes
  proof: Bytes

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  assignedAt: DateTime
  processingAt: DateTime
  processedAt: DateTime
}
