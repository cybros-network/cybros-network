# Squid abstract TypeORM so it's impossible to get the foreign key field, so we have to have some duplicates
# But actually it will generate _id field, but don't expose them

enum AttestationMethod {
  OptOut
}

enum ImplDeploymentPermission {
  Owner
  Public
}

enum WorkerStatus {
  Registered
  Deregistered
  Online
  RequestingOffline
  Offline
}

enum OfflineReason {
  Graceful
  Forced
  Unresponsive
  AttestationExpired
  ImplBlocked
  InsufficientDepositFunds
  Other
}

enum CreatingTaskPermission {
  Owner
  Public
}

enum TaskStatus {
  Pending
  Processing
  Processed
}

enum TaskResult {
  Success
  Failed
  Errored
}

type Account @entity {
  "Account address"
  id: ID!

  workersCount: Int!
  poolsCount: Int!
  createdTasksCount: Int!

  owningWorkers: [Worker!] @derivedFrom(field: "_owner")
  owningPools: [Pool!] @derivedFrom(field: "_owner")
  owningTasks: [Task!] @derivedFrom(field: "_owner")
}

type Impl @entity {
  id: ID!
  implId: Int!

  _owner: Account! @index
  ownerAddress: String!

  attestationMethod: AttestationMethod!
  deploymentPermission: ImplDeploymentPermission!
  oldestBuildVersion: Int!
  newestBuildVersion: Int!
  blockedBuildVersions: [Int!]!
  metadata: String

  # stats
  poolsCount: Int!
  tasksCount: Int!
  onlineWorkersCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  builds: [ImplBuild!] @derivedFrom(field: "_impl")
  workers: [Worker!] @derivedFrom(field: "_impl")
  pools: [Pool!] @derivedFrom(field: "_impl")
}

type ImplBuild @entity {
  id: ID!

  _impl: Impl! @index
  implId: Int!

  version: Int!
  magicBytes: String

  # stats
  onlineWorkersCount: Int!
  tasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  deletedAt: DateTime
}

type Worker @entity {
  id: ID!

  _owner: Account! @index
  ownerAddress: String!

  _impl: Impl @index
  implId: Int

  _implBuild: ImplBuild @index
  implBuildVersion: Int

  status: WorkerStatus! @index
  implSpecVersion: Int!
  attestationMethod: AttestationMethod
  attestationExpiresAt: DateTime
  lastAttestedAt: DateTime
  lastHeartbeatReceivedAt: DateTime
  offlineAt: DateTime
  offlineReason: OfflineReason

  # stats
  poolsCount: Int!
  processingTasksCount: Int!
  assignedTasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  events: [WorkerEvent!] @derivedFrom(field: "_worker")

  servingPools: [PoolWorkers!] @derivedFrom(field: "_worker")
  assignedTasks: [Task!] @derivedFrom(field: "_assignee")
}

enum WorkerEventKind {
  Registered
  Deregistered
  Online
  RequestingOffline
  Offline
  AttestationRefreshed
  JoinedPool
  LeftPool
}

type WorkerEvent @entity {
  id: ID!

  _worker: Worker! @index

  kind: WorkerEventKind!
  payload: JSON

  blockNumber: Int!
  blockTime: DateTime!
}

type Pool @entity {
  id: ID!
  poolId: Int!

  _owner: Account! @index
  ownerAddress: String!

  _impl: Impl! @index
  implId: Int!

  creatingTaskAbility: Boolean!
  metadata: String

  # stats
  workersCount: Int!
  onlineWorkersCount: Int!
  pendingTasksCount: Int!
  processingTasksCount: Int!
  createdTasksCount: Int!
  successfulTasksCount: Int!
  failedTasksCount: Int!
  erroredTasksCount: Int!

  # timestamps
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  workers: [PoolWorkers!] @derivedFrom(field: "_pool")
  creatingTaskPolicies: [CreatingTaskPolicy!] @derivedFrom(field: "_pool")
  tasks: [Task!] @derivedFrom(field: "_pool")
}

type PoolWorkers @entity {
  id: ID! # Useless, but required

  _pool: Pool!
  poolId: Int!

  _worker: Worker!
  worker: String!

  createdAt: DateTime!
  deletedAt: DateTime
}

type CreatingTaskPolicy @entity {
  id: ID!
  policyId: Int!

  _pool: Pool! @index

  permission: CreatingTaskPermission!
  startBlock: Int
  endBlock: Int

  createdAt: DateTime!
  deletedAt: DateTime
}

type Task @entity {
  id: ID!
  taskId: Int!

  _pool: Pool! @index
  poolId: Int!

  _policy: CreatingTaskPolicy!
  policyId: Int!

  _owner: Account! @index
  ownerAddress: String!

  _assignee: Worker @index
  assigneeAddress: String

  _destroyer: Account
  destroyerAddress: String

  status: TaskStatus! @index
  result: TaskResult

  implSpecVersion: Int!
  input: String
  output: String
  proof: String

  # timestamps
  expiresAt: DateTime!
  assignedAt: DateTime
  processingAt: DateTime
  processedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  events: [TaskEvent!] @derivedFrom(field: "_task")
}

enum TaskEventKind {
  Created
  Assigned
  Processing
  Success
  Fail
  Error
  Destroyed
}

type TaskEvent @entity {
  id: ID!

  _task: Task! @index

  kind: TaskEventKind!
  payload: String

  blockNumber: Int!
  blockTime: DateTime!
}
