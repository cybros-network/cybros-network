// This file is part of Cybros.

// Copyright (C) Jun Jiang.
// SPDX-License-Identifier: GPL-3.0-or-later

// Cybros is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cybros is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cybros.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_offchain_computing_workers
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-01, STEPS: `50`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
//    ./target/production/node
//    benchmark
//    pallet
//    --pallet=pallet_offchain_computing_workers
//    --extrinsic=*
//    --chain=dev
//    --steps=50
//    --repeat=50
//    --no-storage-info
//    --no-median-slopes
//    --no-min-squares
//    --execution=wasm
//    --wasm-execution=compiled
//    --heap-pages=4096
//    --output=./pallets/offchain_computing_workers/src/weights.rs
//    --template=./pallet-weight-template.hbs
//    --header
//    ./GPL3-HEADER

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_offchain_computing_workers.
pub trait WeightInfo {
    fn register_worker() -> Weight;
    fn deregister_worker() -> Weight;
    fn transfer_to_worker() -> Weight;
    fn withdraw_from_worker() -> Weight;
    fn online() -> Weight;
    fn refresh_attestation() -> Weight;
    fn request_offline() -> Weight;
    fn request_offline_for() -> Weight;
    fn force_offline() -> Weight;
    fn force_offline_for() -> Weight;
    fn heartbeat() -> Weight;
}

/// Weights for pallet_offchain_computing_workers using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Impls (r:1 w:1)
    /// Proof: OffchainComputingWorkers Impls (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForWorkers (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForWorkers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers AccountOwningWorkers (r:0 w:1)
    /// Proof: OffchainComputingWorkers AccountOwningWorkers (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
    fn register_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `233`
        //   Estimated: `3655`
        // Minimum execution time: 54_000_000 picoseconds.
        Weight::from_parts(55_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Impls (r:1 w:1)
    /// Proof: OffchainComputingWorkers Impls (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForWorkers (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForWorkers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers AccountOwningWorkers (r:0 w:1)
    /// Proof: OffchainComputingWorkers AccountOwningWorkers (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
    fn deregister_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `561`
        //   Estimated: `3655`
        // Minimum execution time: 58_000_000 picoseconds.
        Weight::from_parts(59_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:0)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn transfer_to_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `467`
        //   Estimated: `3655`
        // Minimum execution time: 31_000_000 picoseconds.
        Weight::from_parts(32_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:0)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn withdraw_from_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `467`
        //   Estimated: `3655`
        // Minimum execution time: 31_000_000 picoseconds.
        Weight::from_parts(32_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CurrentFlipFlopStartedAt (r:1 w:0)
    /// Proof: OffchainComputingWorkers CurrentFlipFlopStartedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipOrFlop (r:1 w:0)
    /// Proof: OffchainComputingWorkers FlipOrFlop (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn online() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `518`
        //   Estimated: `4079`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(27_000_000, 4079)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn refresh_attestation() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `475`
        //   Estimated: `3655`
        // Minimum execution time: 14_000_000 picoseconds.
        Weight::from_parts(15_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn request_offline() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn request_offline_for() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn force_offline() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn force_offline_for() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:0)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CurrentFlipFlopStartedAt (r:1 w:0)
    /// Proof: OffchainComputingWorkers CurrentFlipFlopStartedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipOrFlop (r:1 w:0)
    /// Proof: OffchainComputingWorkers FlipOrFlop (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlipSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn heartbeat() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `730`
        //   Estimated: `4079`
        // Minimum execution time: 33_000_000 picoseconds.
        Weight::from_parts(34_000_000, 4079)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Impls (r:1 w:1)
    /// Proof: OffchainComputingWorkers Impls (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForWorkers (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForWorkers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers AccountOwningWorkers (r:0 w:1)
    /// Proof: OffchainComputingWorkers AccountOwningWorkers (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
    fn register_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `233`
        //   Estimated: `3655`
        // Minimum execution time: 54_000_000 picoseconds.
        Weight::from_parts(55_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers Impls (r:1 w:1)
    /// Proof: OffchainComputingWorkers Impls (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForWorkers (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForWorkers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers AccountOwningWorkers (r:0 w:1)
    /// Proof: OffchainComputingWorkers AccountOwningWorkers (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
    fn deregister_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `561`
        //   Estimated: `3655`
        // Minimum execution time: 58_000_000 picoseconds.
        Weight::from_parts(59_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:0)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn transfer_to_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `467`
        //   Estimated: `3655`
        // Minimum execution time: 31_000_000 picoseconds.
        Weight::from_parts(32_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:0)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn withdraw_from_worker() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `467`
        //   Estimated: `3655`
        // Minimum execution time: 31_000_000 picoseconds.
        Weight::from_parts(32_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CurrentFlipFlopStartedAt (r:1 w:0)
    /// Proof: OffchainComputingWorkers CurrentFlipFlopStartedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipOrFlop (r:1 w:0)
    /// Proof: OffchainComputingWorkers FlipOrFlop (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn online() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `518`
        //   Estimated: `4079`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(27_000_000, 4079)
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn refresh_attestation() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `475`
        //   Estimated: `3655`
        // Minimum execution time: 14_000_000 picoseconds.
        Weight::from_parts(15_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn request_offline() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn request_offline_for() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn force_offline() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: OffchainComputing CounterForWorkerAssignedJobs (r:1 w:0)
    /// Proof: OffchainComputing CounterForWorkerAssignedJobs (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:1)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    fn force_offline_for() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `610`
        //   Estimated: `3655`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3655)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// Storage: OffchainComputingWorkers Workers (r:1 w:1)
    /// Proof: OffchainComputingWorkers Workers (max_values: None, max_size: Some(190), added: 2665, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers ImplBuilds (r:1 w:0)
    /// Proof: OffchainComputingWorkers ImplBuilds (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CurrentFlipFlopStartedAt (r:1 w:0)
    /// Proof: OffchainComputingWorkers CurrentFlipFlopStartedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipOrFlop (r:1 w:0)
    /// Proof: OffchainComputingWorkers FlipOrFlop (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlopSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlopSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlopSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers FlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers FlipSet (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: OffchainComputingWorkers CounterForFlipSet (r:1 w:1)
    /// Proof: OffchainComputingWorkers CounterForFlipSet (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn heartbeat() -> Weight {
        // Proof Size summary in bytes:
        //   Measured:  `730`
        //   Estimated: `4079`
        // Minimum execution time: 33_000_000 picoseconds.
        Weight::from_parts(34_000_000, 4079)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
}
